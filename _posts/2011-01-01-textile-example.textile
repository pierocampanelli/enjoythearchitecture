---
layout: post
title: Bazaar Architecture
category: scm
---

h1. The architecture of Bazaar distributed version control

"Bazaar":http://bazaar.canonical.com/ is a version control system that helps you track project history over time and to collaborate easily with others. It is a distributed  in a sense that it allows to work in different ways: from disconnected-mode and decentralized to classic centralized mode. For a quick introduction of bazaar you can see the "wikipedia":http://en.wikipedia.org/wiki/Bazaar_(software) entry and the project home site.

Bazaar has been developed in Python with a plugin architecture that allows easily to extend and it allows developers from different parts of the world to 
In this article I'll show an high-level architecture of Bazaar according mining I made in the source code and in developer's documentation

Bazaar architecture is highly modular based on the concept of Plugins. Functionalities can be extended adding plugins that can add new commands, user interfaces and so on. There are several (over 100) plugins that have been developed during years and that can be downloaded and added to a standard installation.

!http://farm3.static.flickr.com/2030/1794243833_8b1d321441_d.jpg(architecture of bazaar)!

In the above picture you can see a subset of the project's organization of Bazaar. Each box is a subproject. Central project is "bzrlib". It defines basic infrastructure, interfaces that can be exploited by other projects. Most of the projects depends from classes defined in "bzrlib" (To reduce cluttering I avoided to draw all dependency lines).

At core is the BZRLIB project. It is a python project which contains core project. Particular effort has been put in the plugin architecture which allows easily. In particular Command and Hook concept has been explored.
Basically you can extend the project adding plugins to BZRLIB. In particular you can add new commands, new GUI tools, ....

I tried to divide projects in functional areas: you can find projects that add commands to the bazaar system (ex. bzr-tools, bzr-rewrite), you can find projects that add user interface using a flavor of UI Toolkits, you can find projects that add integration between bazaar and IDEs. Eventually you can find projects that are used to supporting the whole environment: documentation generation, script installers and so on.

I Like a lot this project organization: all the aspects of the whole environment has been kept granular. When you start digging in the code you concentrate on the abstractions provided by bzrlib (which by the way is a complex project). After you have figured out how it behaves you can start reading projects that you need or that you are interested. 

h3. Now just a test

Here is a bullet list:

* Bullet one. You can

* Bullet two. You can again


And now show me some code:

<pre>
	for each value do:
		print
	
</pre>
